/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Store;

import direct.market.datatype.DataCategoria;
import direct.market.datatype.DataEspecificacionProducto;
import direct.market.datatype.DataProducto;
import direct.market.exceptions.CategoryException;
import direct.market.exceptions.ProductoException;
import direct.market.factory.Factory;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author kavesa
 */
public class ModificarProducto extends javax.swing.JInternalFrame {

    private File fileImagen;
    private int NoImaCont = 0;
    private int NoCatCont = 0;
    private String oldReferencia;
    //private String[] ImaI;
    private DefaultListModel listaModel = new DefaultListModel();
    private DefaultListModel listaModelCat = new DefaultListModel();

    public static ModificarProducto getInstancia() {
        if (MProdInstancia == null) {
            MProdInstancia = new ModificarProducto();

        }
        return MProdInstancia;
    }

    /**
     * Creates new form InfoProducto
     */
    public ModificarProducto() {
        initComponents();
        cargarCategorias();
        cargarCategoriasSelect();
        habilitartodo(false, true);
        btn_modificar.setEnabled(false);
        SelCategoria.setVisible(false);
        SelImagen.setVisible(false);
        lblNicknameProveedor.setVisible(false);

    }

    private void LimpiarCampos() {
        tfNombre.setText("");
        tfPrecio.setText("");
        tfProveedor.setText("");
        tfReferencia.setText("");
        lblNicknameProveedor.setText("");
        taDescripcion.setText("");
        taEspecificacion.setText("");

        listaModelCat.clear();
        listCategorias.repaint();

        listaModel.clear();
        ImaList.repaint();
    }

    public DefaultMutableTreeNode searchNode(String nodeStr, JTree arbol) {
        DefaultTreeModel modelito = (DefaultTreeModel) arbol.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelito.getRoot();

        DefaultMutableTreeNode node = null;
        Enumeration e = raiz.breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            if (nodeStr.equals(node.getUserObject().toString())) {
                return node;
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SelImagen = new javax.swing.JInternalFrame();
        jPanel10 = new javax.swing.JPanel();
        txtFotoPath = new javax.swing.JTextField();
        LImagen = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        CerrarImaButton = new javax.swing.JButton();
        AgregarImaButton = new javax.swing.JButton();
        SelCategoria = new javax.swing.JInternalFrame();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        CerrarCat = new javax.swing.JButton();
        ActualizarCat = new javax.swing.JButton();
        SeleccionarCat = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        treeCategoria1 = new javax.swing.JTree();
        ModificarProd = new javax.swing.JInternalFrame();
        panelCategoria = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeCategoria = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listProductos = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        btCategoria = new javax.swing.JButton();
        btProducto = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        pnlInformacion = new javax.swing.JTabbedPane();
        pnlDatos = new javax.swing.JPanel();
        tfNombre = new javax.swing.JTextField();
        tfReferencia = new javax.swing.JTextField();
        tfProveedor = new javax.swing.JTextField();
        txtNombre = new javax.swing.JLabel();
        txtNumeroReferencia = new javax.swing.JLabel();
        txtProveedor = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JLabel();
        txtEspecificacion = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        taDescripcion = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        taEspecificacion = new javax.swing.JTextArea();
        txtPrecio = new javax.swing.JLabel();
        tfPrecio = new javax.swing.JTextField();
        lblNicknameProveedor = new javax.swing.JLabel();
        pnlImagenes = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        ImaList = new javax.swing.JList();
        AddImagen = new javax.swing.JButton();
        QuitarImagen = new javax.swing.JButton();
        lblImagenPreview = new javax.swing.JLabel();
        pnlCategorias = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCategorias = new javax.swing.JList();
        AddCategoria = new javax.swing.JButton();
        RemoveCategoria = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btn_modificar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        lblMensaje = new javax.swing.JLabel();

        setMaximizable(true);
        setResizable(true);
        setTitle("Modificar Producto");
        setPreferredSize(new java.awt.Dimension(850, 650));
        getContentPane().setLayout(null);

        SelImagen.setTitle("Seleccionar Imagenes");
        SelImagen.setVisible(true);

        jPanel10.setBackground(new java.awt.Color(214, 228, 237));
        jPanel10.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/backgroundP2.jpg")))); // NOI18N
        jPanel10.setLayout(null);

        txtFotoPath.setEditable(false);
        txtFotoPath.setDisabledTextColor(new java.awt.Color(1, 1, 1));
        txtFotoPath.setEnabled(false);
        jPanel10.add(txtFotoPath);
        txtFotoPath.setBounds(10, 320, 300, 46);

        LImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LImagenAddImaEve(evt);
            }
        });
        jPanel10.add(LImagen);
        LImagen.setBounds(10, 10, 300, 300);

        jPanel11.setBackground(new java.awt.Color(214, 228, 237));
        jPanel11.setLayout(new java.awt.GridLayout(1, 2, 8, 8));

        CerrarImaButton.setText("Cerrar");
        CerrarImaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarImaButtonActionPerformed(evt);
            }
        });
        jPanel11.add(CerrarImaButton);

        AgregarImaButton.setText("Agregar");
        AgregarImaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarImaButtonActionPerformed(evt);
            }
        });
        jPanel11.add(AgregarImaButton);

        jPanel10.add(jPanel11);
        jPanel11.setBounds(10, 380, 300, 40);

        javax.swing.GroupLayout SelImagenLayout = new javax.swing.GroupLayout(SelImagen.getContentPane());
        SelImagen.getContentPane().setLayout(SelImagenLayout);
        SelImagenLayout.setHorizontalGroup(
            SelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
            .addGroup(SelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelImagenLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        SelImagenLayout.setVerticalGroup(
            SelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
            .addGroup(SelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelImagenLayout.createSequentialGroup()
                    .addGap(0, 15, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 15, Short.MAX_VALUE)))
        );

        getContentPane().add(SelImagen);
        SelImagen.setBounds(0, 0, 331, 492);

        SelCategoria.setTitle("Seleccionar Categorias");
        SelCategoria.setVisible(true);

        jPanel6.setBackground(new java.awt.Color(214, 228, 237));
        jPanel6.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/backgroundP2.jpg")))); // NOI18N
        jPanel6.setLayout(null);

        jPanel8.setBackground(new java.awt.Color(214, 228, 237));
        jPanel8.setLayout(new java.awt.GridLayout(1, 3, 8, 8));

        CerrarCat.setText("Cerrar");
        CerrarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarCatActionPerformed(evt);
            }
        });
        jPanel8.add(CerrarCat);

        ActualizarCat.setText("Actualizar");
        ActualizarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarCatActionPerformed(evt);
            }
        });
        jPanel8.add(ActualizarCat);

        SeleccionarCat.setText("Seleccionar");
        SeleccionarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarCatActionPerformed(evt);
            }
        });
        jPanel8.add(SeleccionarCat);

        jPanel6.add(jPanel8);
        jPanel8.setBounds(10, 430, 350, 60);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Categorias");
        treeCategoria1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane7.setViewportView(treeCategoria1);

        jPanel6.add(jScrollPane7);
        jScrollPane7.setBounds(10, 10, 350, 410);

        javax.swing.GroupLayout SelCategoriaLayout = new javax.swing.GroupLayout(SelCategoria.getContentPane());
        SelCategoria.getContentPane().setLayout(SelCategoriaLayout);
        SelCategoriaLayout.setHorizontalGroup(
            SelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 370, Short.MAX_VALUE)
            .addGroup(SelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelCategoriaLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        SelCategoriaLayout.setVerticalGroup(
            SelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
            .addGroup(SelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelCategoriaLayout.createSequentialGroup()
                    .addGap(0, 15, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 15, Short.MAX_VALUE)))
        );

        getContentPane().add(SelCategoria);
        SelCategoria.setBounds(0, 0, 381, 562);

        ModificarProd.setVisible(true);
        ModificarProd.getContentPane().setLayout(null);

        panelCategoria.setBackground(new java.awt.Color(214, 228, 237));
        panelCategoria.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/backgroundP2.jpg")))); // NOI18N

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Categorias");
        treeCategoria.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(treeCategoria);

        jPanel1.setBackground(new java.awt.Color(214, 228, 237));
        jPanel1.setLayout(new java.awt.GridLayout(1, 2, 8, 0));

        jTextField1.setEditable(false);
        jTextField1.setText("Seleccione una Categoria");
        jPanel1.add(jTextField1);

        jTextField2.setEditable(false);
        jTextField2.setText("Seleccione el Producto");
        jPanel1.add(jTextField2);

        jScrollPane2.setViewportView(listProductos);

        javax.swing.GroupLayout panelCategoriaLayout = new javax.swing.GroupLayout(panelCategoria);
        panelCategoria.setLayout(panelCategoriaLayout);
        panelCategoriaLayout.setHorizontalGroup(
            panelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(panelCategoriaLayout.createSequentialGroup()
                .addGroup(panelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCategoriaLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelCategoriaLayout.setVerticalGroup(
            panelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategoriaLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        ModificarProd.getContentPane().add(panelCategoria);
        panelCategoria.setBounds(10, 20, 420, 470);

        jPanel2.setBackground(new java.awt.Color(214, 228, 237));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/backgroundP2.jpg")))); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 8, 0));

        btCategoria.setText("Seleccionar");
        btCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCategoriaActionPerformed(evt);
            }
        });
        jPanel2.add(btCategoria);

        btProducto.setText("Seleccionar");
        btProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProductoActionPerformed(evt);
            }
        });
        jPanel2.add(btProducto);

        ModificarProd.getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 500, 420, 50);

        jPanel4.setBackground(new java.awt.Color(214, 228, 237));
        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/backgroundP2.jpg")))); // NOI18N
        jPanel4.setLayout(null);

        pnlInformacion.setBorder(null);

        pnlDatos.setLayout(null);
        pnlDatos.add(tfNombre);
        tfNombre.setBounds(123, 18, 191, 27);

        tfReferencia.setEditable(false);
        pnlDatos.add(tfReferencia);
        tfReferencia.setBounds(123, 64, 191, 27);

        tfProveedor.setEditable(false);
        pnlDatos.add(tfProveedor);
        tfProveedor.setBounds(120, 110, 190, 27);

        txtNombre.setText("Nombre");
        pnlDatos.add(txtNombre);
        txtNombre.setBounds(12, 23, 52, 17);

        txtNumeroReferencia.setText("Referencia");
        pnlDatos.add(txtNumeroReferencia);
        txtNumeroReferencia.setBounds(12, 69, 67, 17);

        txtProveedor.setText("Proveedor");
        pnlDatos.add(txtProveedor);
        txtProveedor.setBounds(10, 120, 65, 17);

        txtDescripcion.setText("Descripcion");
        pnlDatos.add(txtDescripcion);
        txtDescripcion.setBounds(10, 190, 74, 17);

        txtEspecificacion.setText("Especificacion");
        pnlDatos.add(txtEspecificacion);
        txtEspecificacion.setBounds(10, 310, 89, 17);

        jScrollPane4.setAutoscrolls(true);
        jScrollPane4.setPreferredSize(new java.awt.Dimension(262, 40));

        taDescripcion.setEditable(false);
        taDescripcion.setColumns(20);
        taDescripcion.setLineWrap(true);
        taDescripcion.setRows(5);
        taDescripcion.setPreferredSize(new java.awt.Dimension(260, 40));
        jScrollPane4.setViewportView(taDescripcion);

        pnlDatos.add(jScrollPane4);
        jScrollPane4.setBounds(0, 210, 326, 90);

        taEspecificacion.setEditable(false);
        taEspecificacion.setColumns(20);
        taEspecificacion.setLineWrap(true);
        taEspecificacion.setRows(5);
        jScrollPane5.setViewportView(taEspecificacion);

        pnlDatos.add(jScrollPane5);
        jScrollPane5.setBounds(0, 326, 326, 90);

        txtPrecio.setText("Precio");
        pnlDatos.add(txtPrecio);
        txtPrecio.setBounds(10, 160, 73, 17);
        pnlDatos.add(tfPrecio);
        tfPrecio.setBounds(120, 150, 190, 27);
        pnlDatos.add(lblNicknameProveedor);
        lblNicknameProveedor.setBounds(20, 100, 0, 0);

        pnlInformacion.addTab("Datos Generales", pnlDatos);

        pnlImagenes.setLayout(null);

        ImaList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ImaList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ImaListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(ImaList);

        pnlImagenes.add(jScrollPane8);
        jScrollPane8.setBounds(10, 10, 220, 140);

        AddImagen.setText("Agregar");
        AddImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddImagenActionPerformed(evt);
            }
        });
        pnlImagenes.add(AddImagen);
        AddImagen.setBounds(238, 23, 80, 29);

        QuitarImagen.setText("Quitar");
        QuitarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitarImagenActionPerformed(evt);
            }
        });
        pnlImagenes.add(QuitarImagen);
        QuitarImagen.setBounds(238, 65, 80, 29);
        pnlImagenes.add(lblImagenPreview);
        lblImagenPreview.setBounds(20, 180, 280, 210);

        pnlInformacion.addTab("Imagenes", pnlImagenes);

        pnlCategorias.setLayout(null);

        jScrollPane3.setViewportView(listCategorias);

        pnlCategorias.add(jScrollPane3);
        jScrollPane3.setBounds(10, 10, 210, 390);

        AddCategoria.setText("Agregar");
        AddCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCategoriaActionPerformed(evt);
            }
        });
        pnlCategorias.add(AddCategoria);
        AddCategoria.setBounds(228, 20, 80, 29);

        RemoveCategoria.setText("Quitar");
        RemoveCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveCategoriaActionPerformed(evt);
            }
        });
        pnlCategorias.add(RemoveCategoria);
        RemoveCategoria.setBounds(230, 60, 80, 29);

        pnlInformacion.addTab("Categorias", pnlCategorias);

        jPanel4.add(pnlInformacion);
        pnlInformacion.setBounds(10, 10, 330, 450);

        ModificarProd.getContentPane().add(jPanel4);
        jPanel4.setBounds(430, 20, 350, 470);

        jPanel3.setBackground(new java.awt.Color(214, 228, 237));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/backgroundP2.jpg")))); // NOI18N
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        btn_modificar.setText("Guardar");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });
        jPanel3.add(btn_modificar);

        btn_cancelar.setText("Cerrar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });
        jPanel3.add(btn_cancelar);

        ModificarProd.getContentPane().add(jPanel3);
        jPanel3.setBounds(490, 500, 290, 50);

        lblMensaje.setForeground(new java.awt.Color(255, 0, 0));
        lblMensaje.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Store/Recursos/background.jpg"))); // NOI18N
        ModificarProd.getContentPane().add(lblMensaje);
        lblMensaje.setBounds(0, -1, 800, 570);

        getContentPane().add(ModificarProd);
        ModificarProd.setBounds(0, 0, 800, 610);

        setBounds(0, 0, 800, 600);
    }// </editor-fold>//GEN-END:initComponents

    private static boolean isNumeric(String str) {
        try {
            double d = Double.parseDouble(str);
        } catch (NumberFormatException noesnumero) {
            return false;
        }
        return true;
    }

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        try {
            if (tfNombre.getText().trim().equals("")) {
                throw new ProductoException("El nombre de producto no puede ser vacio");
            }
            if (tfReferencia.getText().trim().equals("")) {
                throw new ProductoException("La Referencia no puede ser vacia");
            }
            if (taDescripcion.getText().trim().equals("")) {
                throw new ProductoException("La Descripcion no puede ser vacia");
            }
            if (taEspecificacion.getText().trim().equals("")) {
                throw new ProductoException("La Especificacion no puede ser vacia");
            }
            if (tfPrecio.getText().trim().equals("") || !isNumeric(tfPrecio.getText().trim())) {
                throw new ProductoException("El Precio ingresado no es valido");
            }
            if (listCategorias.getModel().getSize() == 0) {
                throw new ProductoException("El producto debe tener al menos una categoria");
            }

            DataProducto dp = new DataProducto();
            DataEspecificacionProducto dep = new DataEspecificacionProducto();

            dp.setNombre(tfNombre.getText());
            dp.setReferencia(tfReferencia.getText());
            dp.setDataProveedor(Factory.getInstance().getUsuarioController().getDataProveedor(lblNicknameProveedor.getText()));
            dep.setDescripcion(taDescripcion.getText());
            dep.setEspecificacion(taEspecificacion.getText());
            dep.setPrecio(Double.parseDouble(tfPrecio.getText()));

            List<String> limagenes = new ArrayList<String>();
            DefaultListModel dim = (DefaultListModel) ImaList.getModel();
            int max = dim.getSize();
            for (int i = 0; i < max; i++) {
                String image = dim.getElementAt(i).toString();
                limagenes.add(image);
            }
            dep.setImagenes(limagenes);

            List<DataCategoria> lcategorias = new ArrayList<DataCategoria>();
            DataCategoria categoria;
            DefaultListModel dlm = (DefaultListModel) listCategorias.getModel();
            max = dlm.getSize();
            for (int i = 0; i < max; i++) {
                String cat = dlm.getElementAt(i).toString();
                categoria = Factory.getInstance().getCategoriaController().getCategoriaPorNombre(cat);
                lcategorias.add(categoria);
            }

            dp.setDataCategorias(lcategorias);
            
            dp.setDataEspecificacion(dep);

            if (dp.getReferencia().equals(oldReferencia)) {
                Factory.getInstance().getProductoController().modificarProducto(dp);
            } else {
                Factory.getInstance().getProductoController().modificarProductoConReferenciaModificada(dp, oldReferencia);
            }

            JOptionPane.showMessageDialog(this, "Producto modificado correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
            LimpiarCampos();

        } catch (ProductoException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (CategoryException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void btProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProductoActionPerformed
        if (!listProductos.isSelectionEmpty()) {
            DataProducto dprod = null;
            try {
                dprod = Factory.getInstance().getProductoController().buscarProductoPorName(listProductos.getSelectedValue().toString());

                tfNombre.setText(dprod.getNombre());
                tfReferencia.setText(dprod.getReferencia());
                oldReferencia = dprod.getReferencia();
                lblNicknameProveedor.setText(dprod.getDataProveedor().getNickname());
                lblNicknameProveedor.setVisible(false);
                tfProveedor.setText(dprod.getDataProveedor().getCompania());
                taDescripcion.setText(dprod.getDataEspecificacion().getDescripcion());
                taEspecificacion.setText(dprod.getDataEspecificacion().getEspecificacion());
                tfPrecio.setText(String.valueOf(dprod.getDataEspecificacion().getPrecio()));

                habilitartodo(true, true);

                //lista categorias
                //DefaultListModel listaModelCat = new DefaultListModel();
                List<DataCategoria> catList = Factory.getInstance().getCategoriaController().getCategoriasDeProducto(tfReferencia.getText());
                NoCatCont = catList.size();
                listaModelCat.clear();

                for (DataCategoria dc : catList) {
                    listaModelCat.addElement(dc.getNombre());
                }

                listCategorias.setModel(listaModelCat);
                listCategorias.validate();

                DefaultListModel dlm2 = new DefaultListModel();
                List<String> imagenes = dprod.getDataEspecificacion().getImagenes();
                for (String imagen : imagenes) {
                    dlm2.addElement(imagen);
                }
                ImaList.setModel(dlm2);

            } catch (CategoryException ex) {
                Logger.getLogger(ModificarProducto.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ProductoException ex) {
                Logger.getLogger(ModificarProducto.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            lblMensaje.setText("Debe seleccionar un producto");
        }
    }//GEN-LAST:event_btProductoActionPerformed

    private void btCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCategoriaActionPerformed
        lblMensaje.setText("");
        DefaultTreeModel modelo = (DefaultTreeModel) treeCategoria.getModel();
        DefaultMutableTreeNode seleccionado = (DefaultMutableTreeNode) treeCategoria.getLastSelectedPathComponent();
        DefaultListModel dlm = new DefaultListModel();
        if (seleccionado != null) {
            if (seleccionado.isLeaf()) {//arreglar
                List<DataProducto> productos = new ArrayList<DataProducto>();
                try {
                    productos = Factory.getInstance().getCategoriaController().getProductosPorNombreCategoria(seleccionado.getUserObject().toString());
                } catch (CategoryException ex) {
                    Logger.getLogger(ModificarProducto.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (DataProducto dp : productos) {
                    dlm.addElement(dp.getNombre());
                }
                listProductos.setModel(dlm);
            } else {
                lblMensaje.setText("Debe seleccionar una categoria sin subcategorias");
            }
        } else {
            lblMensaje.setText("Debe seleccionar una categoria");
        }
    }//GEN-LAST:event_btCategoriaActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
        MProdInstancia = null;
        this.dispose();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void CerrarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarCatActionPerformed
        habilitartodo(true, true);
        SelCategoria.setVisible(false);
    }//GEN-LAST:event_CerrarCatActionPerformed

    private void ActualizarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarCatActionPerformed
        cargarCategoriasSelect();
    }//GEN-LAST:event_ActualizarCatActionPerformed

    private void SeleccionarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarCatActionPerformed
        DefaultMutableTreeNode seleccionado = (DefaultMutableTreeNode) treeCategoria1.getLastSelectedPathComponent();

        if (seleccionado != null) {
            //listCategorias.setModel(listaModelCat);
            String cat = seleccionado.getUserObject().toString();
            if (!listaModelCat.contains(cat)) {
                listaModelCat.addElement(cat);
                NoCatCont++;
                habilitartodo(true, true);
                SelCategoria.setVisible(false);
                //listCategorias.setModel(listaModelCat);
                listCategorias.repaint();//.validate();
            } else {
                JOptionPane.showMessageDialog(this, "Esa categoria ya se encuentra ingresada en la lista.", "Warning", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Antes debe seleccionar una categoría.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_SeleccionarCatActionPerformed

    private void LImagenAddImaEve(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LImagenAddImaEve
        JFileChooser buscarImagen = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imágenes (bmp, jpg, png)", new String[]{"bmp", "jpg", "png"});
        buscarImagen.setAcceptAllFileFilterUsed(false);
        buscarImagen.setFileFilter(filtro);

        int result = buscarImagen.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            fileImagen = buscarImagen.getSelectedFile();
            txtFotoPath.setText(fileImagen.getPath());
            ImageIcon imageIcon = new ImageIcon(fileImagen.getPath());
            LImagen.setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(LImagen.getWidth(), -1, Image.SCALE_AREA_AVERAGING)));
            LImagen.repaint();

            String name = fileImagen.getName();
            int pos = name.lastIndexOf('.');
            String ext = name.substring(pos + 1);

            File directorio = new File("src/Store/Recursos/Productos/TempPic/");
            directorio.mkdirs();

            File destino = new File("src/Store/Recursos/Productos/TempPic/tmp" + "." + ext);
            try {
                InputStream in = new FileInputStream(fileImagen);
                OutputStream out = new FileOutputStream(destino);

                byte[] buffer = new byte[1024];
                int tamanoRes;

                while ((tamanoRes = in.read(buffer)) > 0) {
                    out.write(buffer, 0, tamanoRes);
                }
                in.close();
                out.close();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No se puede seleccionar archivo", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_LImagenAddImaEve

    public ImageIcon RZIma(String DirRelativa, int Ancho, int Alto) {
        ImageIcon IcoIco = new ImageIcon(getClass().getResource(DirRelativa));
        Image img = IcoIco.getImage();
        Image newimg = img.getScaledInstance(Ancho, Alto, java.awt.Image.SCALE_SMOOTH);
        IcoIco = new ImageIcon(newimg);
        return IcoIco;
    }

    public void LimpiarIma() {
        txtFotoPath.setText("");
        String DirI = "Recursos/x.jpg";
        LImagen.setIcon(RZIma(DirI, LImagen.getWidth(), LImagen.getHeight()));
    }
    private void CerrarImaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarImaButtonActionPerformed
        LimpiarIma();
        habilitartodo(true, true);
        SelImagen.setVisible(false);

    }//GEN-LAST:event_CerrarImaButtonActionPerformed

    private void AgregarImaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarImaButtonActionPerformed
        if (txtFotoPath.getText() != null) {
            if (NoImaCont == 0) {
                listaModel = new DefaultListModel();
                listaModel.clear();
                ImaList.setModel(listaModel);
            }
            listaModel.addElement(fileImagen.getAbsolutePath());
            //ImaI[NoImaCont] = fileImagen.getAbsolutePath();
            txtFotoPath.setText(fileImagen.getAbsolutePath());
            NoImaCont++;
            LimpiarIma();
            habilitartodo(true, true);
            SelImagen.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(this, "Antes debe seleccionar una Imágen", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_AgregarImaButtonActionPerformed

    private void AddImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddImagenActionPerformed
        // TODO add your handling code here:
        habilitartodo(false, false);
        SelImagen.setVisible(true);
        SelImagen.toFront();
    }//GEN-LAST:event_AddImagenActionPerformed

    private void AddCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCategoriaActionPerformed
        // TODO add your handling code here:
        habilitartodo(false, false);
        SelCategoria.setVisible(true);
        SelCategoria.toFront();
    }//GEN-LAST:event_AddCategoriaActionPerformed

    private void QuitarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitarImagenActionPerformed
        // TODO add your handling code here:
        DefaultListModel dlm = (DefaultListModel) ImaList.getModel();
        int selectedIndex = ImaList.getSelectedIndex();
        dlm.remove(selectedIndex);

    }//GEN-LAST:event_QuitarImagenActionPerformed

    private void RemoveCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveCategoriaActionPerformed
        // TODO add your handling code here:
        DefaultListModel dlm = (DefaultListModel) listCategorias.getModel();
        int selectedIndex = listCategorias.getSelectedIndex();
        dlm.remove(selectedIndex);
    }//GEN-LAST:event_RemoveCategoriaActionPerformed

    private void ImaListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ImaListValueChanged
        reloadImagenPreview();
    }//GEN-LAST:event_ImaListValueChanged

    private void reloadImagenPreview() {
        if (ImaList.getModel().getSize() > 0) {
            ImageIcon imageIcon = new ImageIcon(ImaList.getSelectedValue().toString());
            lblImagenPreview.setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(lblImagenPreview.getWidth(), -1, Image.SCALE_AREA_AVERAGING)));
            lblImagenPreview.repaint();
        } else {
            lblImagenPreview.setIcon(null);
            lblImagenPreview.revalidate();
        }
    }

    private void cargarCategorias() {
        try {

            List<DataCategoria> categorias = Factory.getInstance().getCategoriaController().getCategorias();

            DefaultTreeModel modelo = (DefaultTreeModel) treeCategoria.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) modelo.getRoot();
            DefaultMutableTreeNode nuevo;
            DefaultMutableTreeNode padre;

            for (DataCategoria dc : categorias) {
                if (dc.getParent().equals("Categorias")) {
                    nuevo = new DefaultMutableTreeNode(dc.getNombre());
                    root.add(nuevo);
                } else {
                    nuevo = new DefaultMutableTreeNode(dc.getNombre());
                    padre = searchNode(dc.getParent(), treeCategoria);
                    modelo.insertNodeInto(nuevo, padre, padre.getChildCount());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ModificarProducto.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarCategoriasSelect() {

        try {

            List<DataCategoria> categorias1 = Factory.getInstance().getCategoriaController().getCategorias();

            DefaultTreeModel modelo1 = (DefaultTreeModel) treeCategoria1.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) modelo1.getRoot();
            DefaultMutableTreeNode nuevo;
            DefaultMutableTreeNode padre;

            for (DataCategoria dc : categorias1) {
                if (dc.getParent().equals("Categorias")) {
                    nuevo = new DefaultMutableTreeNode(dc.getNombre());
                    root.add(nuevo);
                } else {
                    nuevo = new DefaultMutableTreeNode(dc.getNombre());
                    padre = searchNode(dc.getParent(), treeCategoria1);
                    modelo1.insertNodeInto(nuevo, padre, padre.getChildCount());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ModificarProducto.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void habilitartodo(boolean flg, boolean flgbotonera) {

        tfReferencia.setEditable(flg);
        //tfProveedor.setEditable(flg);
        taDescripcion.setEditable(flg);
        taEspecificacion.setEditable(flg);
        ImaList.setEnabled(flg);
        AddImagen.setEnabled(flg);
        QuitarImagen.setEnabled(flg);
        listCategorias.setEnabled(flg);
        AddCategoria.setEnabled(flg);
        RemoveCategoria.setEnabled(flg);
        pnlInformacion.setEnabled(flg);
        tfPrecio.setEnabled(flg);

        listProductos.setEnabled(flgbotonera);
        treeCategoria.setEnabled(flgbotonera);
        btCategoria.setEnabled(flgbotonera);
        btProducto.setEnabled(flgbotonera);
        btn_cancelar.setEnabled(flgbotonera);
        btn_modificar.setEnabled(flgbotonera);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarCat;
    private javax.swing.JButton AddCategoria;
    private javax.swing.JButton AddImagen;
    private javax.swing.JButton AgregarImaButton;
    private javax.swing.JButton CerrarCat;
    private javax.swing.JButton CerrarImaButton;
    private javax.swing.JList ImaList;
    private javax.swing.JLabel LImagen;
    private javax.swing.JInternalFrame ModificarProd;
    private javax.swing.JButton QuitarImagen;
    private javax.swing.JButton RemoveCategoria;
    private javax.swing.JInternalFrame SelCategoria;
    private javax.swing.JInternalFrame SelImagen;
    private javax.swing.JButton SeleccionarCat;
    private javax.swing.JButton btCategoria;
    private javax.swing.JButton btProducto;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblImagenPreview;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JLabel lblNicknameProveedor;
    private javax.swing.JList listCategorias;
    private javax.swing.JList listProductos;
    private javax.swing.JPanel panelCategoria;
    private javax.swing.JPanel pnlCategorias;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JPanel pnlImagenes;
    private javax.swing.JTabbedPane pnlInformacion;
    private javax.swing.JTextArea taDescripcion;
    private javax.swing.JTextArea taEspecificacion;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfPrecio;
    private javax.swing.JTextField tfProveedor;
    private javax.swing.JTextField tfReferencia;
    private javax.swing.JTree treeCategoria;
    private javax.swing.JTree treeCategoria1;
    private javax.swing.JLabel txtDescripcion;
    private javax.swing.JLabel txtEspecificacion;
    private javax.swing.JTextField txtFotoPath;
    private javax.swing.JLabel txtNombre;
    private javax.swing.JLabel txtNumeroReferencia;
    private javax.swing.JLabel txtPrecio;
    private javax.swing.JLabel txtProveedor;
    // End of variables declaration//GEN-END:variables
    private static ModificarProducto MProdInstancia;
}
